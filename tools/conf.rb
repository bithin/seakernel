#!/usr/bin/env ruby

# processes a .cfg file

$output_array = Array.new
$path_array = [""]
$node_array = Array.new
$output_file = ".config.cfg"
$input_file = "kernel.cfg"

class Node
	attr_accessor :name
	attr_accessor :desc
	attr_accessor :ans
	attr_accessor :default
	attr_accessor :path
	attr_accessor :key
	attr_accessor :result
	attr_accessor :dnwv
	def initialize(k)
		puts "new node: #{k}"
		@key = k
		@path = $path_array.dup
		@default = nil
		@ans = nil
		@name = nil
		@desc = nil
		@result = nil
		@dnwv = nil
	end

	def parse_line(line)
		if @desc != nil
			@desc << line
		else
			kv = line.split("=")
			if kv[0].nil? || kv[1].nil?
				return
			end
			
			case kv[0]
			when "name"
				@name=kv[1].dup.strip
			when "ans"
				@ans=kv[1].dup.strip
			when "default"
				@default=kv[1].dup.strip
			when "dnwv"
				@dnwv=kv[1].dup.strip
			when "desc"
				@desc=kv[1].dup.strip
			end
		end
	end

end

config_header = <<DOC
# This file was generated by conf.rb
# It is not recommended to edit this file directly.

DOC

def get_input(question, array, default)
	while true
		printf("%s%s%s? ", question, array.nil? ? "" : " (" + array.join("/") + ")", (default != nil) ? " [#{default}]" : "")
		input = gets.downcase.chomp
		if input == "" && default != nil
			puts "--> #{default}"
			return default
		elsif input != "" && (array.nil? || (array.index(input) || array.index(input.capitalize)))
			puts "--> #{input}"
			return input
		end
		$stderr.puts "invalid input"
	end
end

def process_file(path)
	temp = ""
	file = File.open(path, "r")
	lines = Array.new
	file.each do |line|
		lines.push(line.dup)
	end
	file.close
	nindex=0
	node = nil
	lines.each do |line|
		nindex+=1
		if line.nil?
			next
		end
		# get rid of comments and empty lines
		hash = line.index("#")
		if hash != nil
			line.slice!(hash..-1)
		end
		line = line.chomp.strip

		if line == "" || line.nil?
			next
		end
		if line.index("}") && line.length != 1
			b = line.split("}")
			lines.insert(nindex, b[0].strip)
			lines.insert(nindex + 1, "}")
			lines.insert(nindex + 2, b[1].strip)
		elsif line.index("}")
			popped = $path_array.pop
			puts "popping: got #{popped}"
			temp.clear
			if popped.index("=")
				# popped a node! Add it to the chain
				$node_array.push(node.dup)
				node = nil
			end
		elsif line.index("{")
			a = line.split("{")
			if a[0].nil? || a[0] == ""
				$path_array.push(temp.dup.strip)
			else
				$path_array.push(a[0].dup.strip)
			end
			temp.clear
			puts "pushed: #{$path_array[-1]}"
			lines.insert(nindex, a[1])
			if $path_array.last.index("=")
				key = $path_array.last.split("=")
				if key[1].nil?
					$stderr.puts "error in configuration file: key could not be split"
					exit 1
				end
				node = Node.new(key[1].strip)
			end
		elsif node != nil
			# we have a line to process, and the line is node data
			node.parse_line(line.strip)
		elsif line.index("include")
			c = line.split("include")
			if c[1].nil?
				$stderr.puts "specify file to include from!"
				exit 1
			end
			process_file(c[1].strip)
		else
			temp << line
		end
	end
end

process_file($input_file)

$node_array.each do |node|
	path = node.path.dup
	path.pop
	printf("%s/ : %s\n%s\n", path.join("/"), node.key, node.desc)
	result = get_input(node.name, node.ans.nil? ? nil : node.ans.split(","), node.default)
	puts ""
	node.result = result
end

file = File.open($output_file, "w")
File.truncate($output_file, 0)

puts "writing configuration to #{$output_file}"
file.puts(config_header)
$node_array.each do |node|
	if node.dnwv != node.result
		file.puts(node.key + "=" + node.result.to_s)
	end
end
file.close
